---
title: Are We in Kansas Anymore?
author: Andrew Carr
date: 2019-11-01
categories: [code, analysis]
image: "pic4.png"
---


I've been watching a lot of movies lately.  Last month, I was on watching a lot of John Grisham adaptations. Many of Grisham's books are set in the Deep South. Before that, I was watching a lot of John Hughes movies, many of which are set in the Midwest. My forays into Grisham adaptations and Hughes films led me to wonder - are fewer movies set in rural and smalltown America today than in the 80s and 90s? In other words, are we in Kansas anymore?      

This question led me to examine the broader question of how Hollywood film has changed over the past few decades. In this post, I look at the changing relationship between genre and movie box office returns, shifts in the representation of men and women among movies' top-billed actors, and a whole lot more. I conduct these analyses using data I collected through Wikipedia's APIs. The data consists of 9712 movies. The population frame is all movies with Wikipedia entries released in the United States between 1980 and 2019. You can download the data in its entirety here [github.com/andrewcarr24/large_files/blob/master/movie_metadata_tbl.rds](https://github.com/datadiarist/large_files/blob/master/movie_metadata_tbl.rds).

# Data 

Wikipedia has a comprehensive set of APIs that allows users to collect almost anything from the site, even content from previous versions of Wikipedia pages. My sample of movies come from a group of pages that all have the headline "List of American films of [a year]". Each of these pages has tables with movie titles and links to their pages. By drawing from these, I collected a list of names and links for 9712 movies.  I then pulled information from the infobox of each movie page. Here's what the infobox looks like for Next, a timeless cinematic masterpiece starring Nicolas Cage as a small-time magician who can see exactly two minutes into the future.

![](pic1.png){fig-align="center" width="25%"}

For each movie, I collected the release date, box office, budget, runtime, directors, and top-billed actors from the infobox. I also gathered links to the pages of top-billed actors in each movie. Finally, I collected additional information by examining main body of movie pages. Most movie pages have a "Critical Reception" section that has a movie's Rotten Tomotoes score and the number of reviews on which this score is based. I also extracted movie genre from the introduction of each movie page. Finally, I used a set of rules for extracting where the film was set from the film synopsis. Let's have a look at the columns of the data.

```{r, warning = FALSE, include = FALSE}
library(readr)
library(dplyr)
library(highcharter)
library(purrr)
library(jsonlite)
library(ggplot2)
library(stringr)
library(htmlwidgets)
library(htmltools)

movie_metadata_tbl <- readRDS("movie_metadata_tbl.rds")
movie_metadata_tbl <- movie_metadata_tbl %>% select(-c("id", "budget",
                                                       "genres", "action_fin", "adventure_fin", "comedy_fin",
                                                       "drama_fin", "horror_fin", "animated_fin", "gender_tots", 
                                                       "gender_prop")) %>% rename(date = date2, cast_race = race_prop,
                                                                                  budget = budget2, box_office = box_office2,
                                                                                 cast_age_gender = age_gender_group,
                                                                                  cast_age = cast_ages, runtime = time2) %>% 
  select(name, name_lab, director, director_link, genre_cat, runtime, budget, budget_adj, box_office, 
         box_office_adj, profit_adj,
         profit_lab, review, num_review, date, year, month, day, year_fin, cast, cast_link, 
         cast_race, cast_gender, cast_age, cast_age_gender, cast_bday, tot_white, tot_black, 
         tot_hisp, tot_asian, white_prop, black_prop, hisp_prop, asian_prop, race_tots, tot_man, tot_woman)

movie_metadata_tbl$review[movie_metadata_tbl$name_lab == "Apollo 13"] <- 95
movie_metadata_tbl$review[movie_metadata_tbl$name_lab == "The Prince of Egypt"] <- 80
movie_metadata_tbl$review[movie_metadata_tbl$name_lab == "Norm of the North"] <- 9
```

```{r}
colnames(movie_metadata_tbl)
```

This dataset has movie name, director and director link, genre, runtime, budget and box office information, Rotten Tomatoes review information, and release date information.  After that, there is a set of columns that are nested lists containing data on top-billed actors in each movie. These lists contain actors' names, links to their Wikipedia pages, race, gender, age, birthday, and more. Finally, there are several columns of movie-level actor data, including the proportion Black of top-billed actors who are Black and the total number of women among top-billed actors. Let's start with some exploratory data analysis. Here are the top ten highest-grossing Hollywood movies according to the data. 

```{r}
movie_metadata_tbl %>%
  arrange(desc(box_office)) %>% 
  slice(1:10) %>% 
  pull(name_lab)
```

Let's see how this list compares to an inflation-adjusted list of highest grossing films.   

```{r}
movie_metadata_tbl %>%
  arrange(desc(box_office_adj)) %>% 
  slice(1:10) %>%
  pull(name_lab)
```

Adjusting for inflation vaults James Cameron to the top of the list with Titanic and Avatar. Next, I pull the longest and shortest movies from the data.

```{r}
paste("Longest: ", movie_metadata_tbl %>% 
        arrange(desc(runtime)) %>% pull(name_lab) %>% .[1])
paste("Shortest: ", movie_metadata_tbl %>% 
        arrange(runtime) %>% pull(name_lab) %>% .[1])
```

The Cure for Insomnia is an 87-hour long experimental film that consists of an artist reading a 4,080-page poem.  It held the Guiness record for longest film before being supplanted by a non-American movie.  Luxo Jr. is a two minute long animated film released by Pixar in 1986 that was the first CGI movie to be nominated for an Oscar. We can also look at which actors appear most in the data.  

```{r}
movie_metadata_tbl$cast_link %>% 
  unlist %>% 
  table %>%
  sort(decreasing = TRUE) %>% 
  head(5)
```

It turns out that Samuel L. Jackson is the hardest working actor in show business, with 76 top billings since 1980. Jackson has this distinction on lock, holding a nine-film lead on Unbreakable co-star Bruce Willis.

What other amusing outliers can we find in the data?  How about worst movie of all time?  I get this by filtering the data to movies that have received at least 40 Rotten Tomatoes reviews and sorting by average Rotten Tomatoes score.

```{r}
movie_metadata_tbl %>% 
  filter(num_review > 40) %>% 
  arrange(review) %>%
  pull(name) %>% 
  head(10)
```

These movies all received either a 0% or 1% on Rotten Tomatoes based on 40 or more reviews. There are some derivative horror movies (One Missed Call, Alone in the Dark) and tasteless comedies (Disaster Movie, National Lampoon's Gold Diggers) here. We see movies that have ended careers (Roberto Benini as Pinocchio in Pinocchio, Cubo Gooding Jr. in Daddy Day Camp). My favorite on this list is Dana Carvey's incredibly misguided attempt to capitalize on the success of Michael Myer's Austin Powers with The Master of Disguise.  

# Visualizing Trends in Hollywood Film

```{r, warning = FALSE, include = FALSE}

## Highcharter preferences-
hcoptslang <- getOption("highcharter.lang")
hcoptslang$thousandsSep <- ","
options(highcharter.lang = hcoptslang)

actor_stats_tbl <- readRDS("actor_stats_tbl")
actor_stats_tbl$oscar_win[actor_stats_tbl$actor == "Ben_Affleck"] <- 0
actor_stats_tbl$oscar_win[actor_stats_tbl$actor == "Brad_Pitt"] <- 0
actor_stats_tbl$oscar_nom[actor_stats_tbl$actor == "Brad_Pitt"] <- 1
actor_stats_tbl <- actor_stats_tbl %>% mutate(award_group = "No oscar") %>% 
  mutate(award_group = ifelse(oscar_nom == 1, "Nominee", award_group)) %>% 
  mutate(award_group = ifelse(oscar_win == 1, "Winner", award_group))

# 1st theme
thm <- hc_theme_merge(
  hc_theme_tufte(),
  hc_theme(
    colors = c(hex_to_rgba("#9B1B30", ".3"), 
               hex_to_rgba("#8f7f6c", ".3"),
               hex_to_rgba("#EBAB47", ".3")),
    chart = list(
      backgroundColor = "#fbfbfb"),
    legend = list(
      itemStyle = list(
        fontFamily = 'Andale Mono',
        color = 'black'
      )),
    title = list(
      style = list(
        color = '#333333',
        fontFamily = "Optima"
      )
    ),
    subtitle = list(
      style = list(
        color = '#666666',
        fontFamily = "Georgia"
      )
    )
  ))

# 2nd theme
thm2 <- hc_theme_merge(
  hc_theme_tufte(),
  hc_theme(
    colors = c(hex_to_rgba("#386cb0", ".24"), 
               hex_to_rgba("#fdc086", ".2"), 
               hex_to_rgba("#7fc97f", ".2"),
               hex_to_rgba("#f0f078", ".25"), 
               hex_to_rgba("#beaed4", ".35"), 
               hex_to_rgba("#ed0707", ".1")),
    chart = list(
      backgroundColor = "#fbfbfb"),
    legend = list(
      itemStyle = list(
        fontFamily = 'Andale Mono',
        color = 'black'
      )),
    title = list(
      style = list(
        color = '#333333',
        fontFamily = "Optima"
      )
    ),
    subtitle = list(
      style = list(
        color = '#666666',
        fontFamily = "Georgia"
      )
    )
  ))
```

Next, I look at how actors compare in terms of the profitability and critical success of their films. The figure below was created using the Highcharts Javascript library. It shows actors who have starred in more than 20 movies since 1980. The x-axis is the average Rotten Tomatoes score of an actor's movies, and the y-axis is average profitability, measured as net box office returns adjusted for inflation. The actors are in three groups. Red dots represent actors that have never been nominated for an Oscar, silver dots are actors that have been nominated but have never won an oscar, and gold dots are actors that have won an oscar. Being in the upper right part of the figure is good, while being in the lower left part of the figure, is bad. You can hover your mouse over each dot to view the stats on that actor.

```{r, echo = FALSE, warning = FALSE}
# temp_hchart <- hchart(actor_stats_tbl, "scatter", 
#        hcaes(x = mean_reviews, y = mean_profit, group = award_group)) %>% 
#   hc_tooltip(headerFormat = '',
#              pointFormat = "<b>Actor</b>: {point.actor_lab}  <br> <b>Mean Profit</b>: {point.mean_profit_lab} <br> # <b>Mean RT Score</b>: {point.mean_reviews_lab}") %>%
#   hc_xAxis(title = list(text = ""), min = 20, max = 80) %>% 
#   hc_yAxis(title = list(text = ""), min = 12530748, max = 515300367) %>% 
#   hc_title(text = "American Movie Stars") %>%
#   hc_subtitle(text = "By critical acclaim and box office returns") %>% 
#   hc_add_theme(thm) %>% hc_boost(seriesThreshold = 1) %>% 
#   hc_xAxis(title = list(text = "Mean RT Score")) %>% 
#   hc_yAxis(title = list(text = "Mean Net Box Office"))
# saveWidget(temp_hchart, "highchart1.html", selfcontained = TRUE)

htmltools::tags$iframe(
  srcdoc = paste(readLines("highchart1.html"), collapse = "\n"),
  width = "100%",
  height = "500px",
  frameborder = "0"
)
```

The figure shows a positive correlation between critical acclaim and box office returns. The data is heteroskedastic: the spread in box office returns increases as the mean Rotten Tomatoes score goes up. There's a positive relationship between winning an Academy Award and being in positively reviewed and profitable movies. To see this clearly, click the "Nominee" label at the bottom of the figure to hide nominated actors and display only actors that have won an oscars and actors who have not been nominated.

Some actors have carved out a niche as "prestige" actors - while their movies may not make a lot of money, they are able to continue to get work on the critical acclaim that their movies receive. These actors can be found in the lower right-hand corner of the figure. They include Phillip Seymour Hoffman (the most critically-acclaimed actor in the sample), Frances McDormand, Edward Nortan, Denzel Washington, Jack Nicolson, and Angelica Houston. The lower-left quadrant of the figure, on the other hand, has actors whose movies do not garner praise from critics or make a lot of money.  Unsurprisingly, most of these actors are no longer in large-budget Hollywood films.  They include Brendan Fraser, Sharon Stone, Kevin Pollack, Cuba Gooding Jr., and John Travolta.  

One could conclude from this figure that Alan Rickman is the greatest actor of all time.  He appears at the top right of the plot. His combined Rotten Tomatoes score and mean box office returns are significantly higher than any other actor's. Shockingly, Rickman was never nominated for an Academy Award. Fittingly, the Guardian gave Rickman an "honorable mention" on their list of greatest actors to never have been nominated for an oscar.

The next figure shows trends in the kinds of movies that do well at the box office.  Each point represents a movie, the x-axis gives the date of a movie's release, and the y-axis indicates gross box office returns. Movies are grouped into six genres - Action, Adventure/Fantasy, Drama, Comedy, Animated, and Horror. You can hover over a point to view the details for a specific movie. To filter by genre, click the genre label at the bottom of the figure.

```{r, echo = FALSE}
# temp_hchart <- hchart(movie_metadata_tbl %>% filter(!is.na(genre_cat)), "scatter", 
#        hcaes(x = year_fin, y = profit_adj, group = genre_cat)) %>% 
#   hc_tooltip(headerFormat = '',
#              pointFormat = "<b>Movie</b>: {point.name_lab}  <br> <b>Net Box Office</b>: {point.profit_lab} <br> <b>RT # Score</b>: {point.review}") %>%
#   hc_xAxis(title = list(text = ""), min = 1979, max = 2020) %>% 
#   hc_yAxis(title = list(text = ""), min = -5000000, max = 1700000000) %>%
#   hc_title(text = "Movie Box Office Returns (1980-2019)") %>%
#   hc_add_theme(thm2) %>% hc_boost(seriesThreshold = 1) %>% 
#   hc_xAxis(title = list(text = "Year")) %>% 
#   hc_yAxis(title = list(text = "Mean Net Box Office"))
# saveWidget(temp_hchart, "highchart2.html", selfcontained = TRUE)

htmltools::tags$iframe(
  srcdoc = paste(readLines("highchart2.html"), collapse = "\n"),
  width = "100%",
  height = "500px",
  frameborder = "0"
)
```

Movie box office returns vary substantially by genre. The movies that make the most money are Fantasy/Adventure movies such as superhero franchises. The number of highly profitable Fantasy/Adventure films has increased in the past fifteen years or so. This can be seen clearly by removing the other genres from the plot. Animated movies have also had an uptick in profitability. This started with the release of Toy Story in late 1995. 

At the other end of the profitability spectrum are horror films. Represented by red dots, these movies sit along the bottom of the figure. Horror movies are often made on very small budgets, and rarely make a lot of money. The most profitable horror movie in this figure is The Sixth Sense, with an adjusted net box office of almost $1 billion.  

We can look at the bottom of the figure to see the biggest box office bombs in since 1980. There are many - Gigli, Adventures of Pluto Nash, Inchon, Mars Needs Moms - but the standout among them is Cutthroat Island, a 1995 comedy with an adjusted net box office of negative $143 million. Sure enough, this movie holds the Guiness record for largest box office loss of all time. The movie bankrupted its production company, Carolco Pictures, which went under the same year the movie was released.

Turning to demographic trends, the figure below visualizes changes in the average proportions of white, Black, Hispanic, and Asian top-billed actors in all Hollywood movies since 1980. Unlike the previous figures, this one allows you to "drill down" to additional figures by clicking the lines of the main plot. The drill down plots were written in Javascript and are incorporated into the code for the main plot using the JS function from the htmlwidgets package.

```{r, echo = FALSE, include = FALSE, warning = FALSE}
## Tbl for race visualization (HC 3 in viz script) ## 
# race_trends_tbl <- movie_metadata_tbl %>% 
#   filter(!is.na(genre_cat)) %>% 
#   mutate(year = stringr::str_sub(date, 1, 4) %>% as.numeric) %>% 
#   group_by(genre_cat, year) %>% 
#   summarise(white_tots = sum(tot_white), black_tots = sum(tot_black), 
#             hisp_tots = sum(tot_hisp), asian_tots = sum(tot_asian),
#             actor_tots = sum(race_tots)) %>% 
#   mutate(white_prop = white_tots/actor_tots, 
#          black_prop = black_tots/actor_tots, 
#          hisp_prop = hisp_tots/actor_tots, 
#          asian_prop = asian_tots/actor_tots) %>% ungroup
# 
# all_prop_tbl  <-  race_trends_tbl %>% filter(year > 1979 & year < 2020) %>% group_by(year) %>% 
#   mutate(all_tots = sum(actor_tots), all_white_prop = sum(white_tots)/all_tots,
#          all_black_prop = sum(black_tots)/all_tots, all_hisp_prop = sum(hisp_tots)/all_tots,
#          all_asian_prop = sum(asian_tots)/all_tots) %>% slice(1) %>% .[1:40,]
# 
# ### White Data ### 
# white_genre_tbl <- race_trends_tbl %>% filter(year < 2020 & year > 1979) %>% group_by(year) %>% 
#   mutate(white_genre_tots = sum(white_tots)) %>% ungroup %>% 
#   mutate(white_genre_prop = white_tots/white_genre_tots) %>% pull(white_genre_prop) %>% 
#   tibble(genre = rep(c("Action", "Animated", "Comedy", "Drama", "Fantasy/Adventure", "Horror"), each = 40), 
#          year = rep(1980:2019,6), white_prop = .) %>% 
#   mutate(white_prop2 = white_prop*(all_prop_tbl %>% pull(all_white_prop)))
# 
# genre_data <- list()
# for(j in c("Action", "Animated", "Comedy", "Drama", "Fantasy/Adventure", "Horror")){
#   
#   datums <- list() 
#   tbl <- white_genre_tbl %>% filter(genre == j)
#   
#   for(i in 1:40){
#     
#     x <- tbl %>% pull(year) %>% .[i]
#     y <- tbl %>% pull(white_prop2) %>% .[i]
#     datums[[i]] <- paste0("[", x, ",", y, "]")
#     
#     genre_data[[j]] <- paste(datums %>% unlist, collapse = ",")
#   }
# }
# 
# ### Black Data
# black_genre_tbl <- race_trends_tbl %>% filter(year < 2020 & year > 1979) %>% group_by(year) %>% 
#   mutate(black_genre_tots = sum(black_tots)) %>% ungroup %>% 
#   mutate(black_genre_prop = black_tots/black_genre_tots) %>% pull(black_genre_prop) %>% 
#   tibble(genre = rep(c("Action", "Animated", "Comedy", "Drama", "Fantasy/Adventure", "Horror"), each = 40), 
#          year = rep(1980:2019,6), black_prop = .) 
# black_genre_tbl <- black_genre_tbl %>% mutate(black_prop2 = black_prop*(all_prop_tbl %>% pull(all_black_prop)))
# 
# genre_data2 <- list()
# for(j in c("Action", "Animated", "Comedy", "Drama", "Fantasy/Adventure", "Horror")){
#   
#   datums <- list() 
#   tbl <- black_genre_tbl %>% filter(genre == j)
#   
#   for(i in 1:40){
#     
#     x <- tbl %>% pull(year) %>% .[i]
#     y <- tbl %>% pull(black_prop2) %>% .[i]
#     datums[[i]] <- paste0("[", x, ",", y, "]")
#     
#     genre_data2[[j]] <- paste(datums %>% unlist, collapse = ",")
#   }
# }
# 
# ### Hisp Data
# hisp_genre_tbl <- race_trends_tbl %>% filter(year < 2020 & year > 1979) %>% group_by(year) %>% 
#   mutate(hisp_genre_tots = sum(hisp_tots)) %>% ungroup %>% 
#   mutate(hisp_genre_prop = hisp_tots/hisp_genre_tots) %>% pull(hisp_genre_prop) %>% 
#   tibble(genre = rep(c("Action", "Animated", "Comedy", "Drama", "Fantasy/Adventure", "Horror"), each = 40), 
#          year = rep(1980:2019,6), hisp_prop = .) 
# hisp_genre_tbl <- hisp_genre_tbl %>% mutate(hisp_prop2 = hisp_prop*(all_prop_tbl %>% pull(all_hisp_prop)))
# 
# genre_data3 <- list()
# for(j in c("Action", "Animated", "Comedy", "Drama", "Fantasy/Adventure", "Horror")){
#   
#   datums <- list() 
#   tbl <- hisp_genre_tbl %>% filter(genre == j)
#   
#   for(i in 1:40){
#     
#     x <- tbl %>% pull(year) %>% .[i]
#     y <- tbl %>% pull(hisp_prop2) %>% .[i]
#     datums[[i]] <- paste0("[", x, ",", y, "]")
#     
#     genre_data3[[j]] <- paste(datums %>% unlist, collapse = ",")
#   }
# }
# 
# ### Asian Data
# asian_genre_tbl <- race_trends_tbl %>% filter(year < 2020 & year > 1979) %>% group_by(year) %>% 
#   mutate(asian_genre_tots = sum(hisp_tots)) %>% ungroup %>% 
#   mutate(asian_genre_prop = asian_tots/asian_genre_tots) %>% pull(asian_genre_prop) %>% 
#   tibble(genre = rep(c("Action", "Animated", "Comedy", "Drama", "Fantasy/Adventure", "Horror"), each = 40), 
#          year = rep(1980:2019,6), asian_prop = .) 
# asian_genre_tbl <- asian_genre_tbl %>% mutate(asian_prop2 = asian_prop*(all_prop_tbl %>% pull(all_asian_prop)))
# 
# genre_data4 <- list()
# for(j in c("Action", "Animated", "Comedy", "Drama", "Fantasy/Adventure", "Horror")){
#   
#   datums <- list() 
#   tbl <- asian_genre_tbl %>% filter(genre == j)
#   
#   for(i in 1:40){
#     
#     x <- tbl %>% pull(year) %>% .[i]
#     y <- tbl %>% pull(asian_prop2) %>% .[i]
#     datums[[i]] <- paste0("[", x, ",", y, "]")
#     
#     genre_data4[[j]] <- paste(datums %>% unlist, collapse = ",")
#   }
# }
# 
# ## Javascript for Drilldown Figures ## 
# fn <- paste0("function(e) {
#              if (!e.seriesOptions) {
#              var chart = this,
#              drilldowns = {
#              'White': {
#              name: 'Action',
#              color: 'rgba(56,108,176,.5)',
#              stacking: 'normal',
#              drilldownName: 'White',
#              data: [", genre_data$Action,
#              "]
#              },
#              'White2': {
#              name: 'Animated',
#              color: 'rgba(253,192,134,.5)',
#              stacking: 'normal',
#              data: [", genre_data$Animated,
#              "]
#              },
#              'White3': {
#              name: 'Comedy',
#              color: 'rgba(127,201,117,.5)',
#              stacking: 'normal',
#              data: [", genre_data$Comedy,
#              "]
#              },
#              'White4': {
#              name: 'Drama',
#              color: 'rgba(240,240,120,.7)',
#              stacking: 'normal',
#              data: [", genre_data$Drama,
#              "]
#              },
#              'White5': {
#              name: 'Fantasy/Adventure',
#              color: 'rgba(190,174,212,.5)',
#              stacking: 'normal',
#              data: [", genre_data$'Fantasy/Adventure',
#              "]
#              },
#              'White6': {
#              name: 'Horror',
#              color: 'rgba(237,7,7,.5)',
#              stacking: 'normal',
#              data: [", genre_data$Horror,
#              "]
#              },
#              'Black': {
#              name: 'Action',
#              color: 'rgba(56,108,176,.5)',
#              stacking: 'normal',
#              data: [", genre_data2$Action,"]
#              },
#              'Black2': {
#              name: 'Animated',
#              color: 'rgba(253,192,134,.5)',
#              stacking: 'normal',
#              data: [", genre_data2$Animated,
#              "]
#              },
#              'Black3': {
#              name: 'Comedy',
#              color: 'rgba(127,201,117,.5)',
#              stacking: 'normal',
#              data: [", genre_data2$Comedy,
#              "]
#              },
#              'Black4': {
#              name: 'Drama',
#              color: 'rgba(240,240,120,.7)',
#              stacking: 'normal',
#              data: [", genre_data2$Drama,
#              "]
#              },
#              'Black5': {
#              name: 'Fantasy/Adventure',
#              color: 'rgba(190,174,212,.5)',
#              stacking: 'normal',
#              data: [", genre_data2$'Fantasy/Adventure',
#              "]
#              },
#              'Black6': {
#              name: 'Horror',
#              color: 'rgba(237,7,7,.5)',
#              stacking: 'normal',
#              data: [", genre_data2$Horror,
#              "]
#              },
#              'Hispanic': {
#              name: 'Action',
#              color: 'rgba(56,108,176,.5)',
#              stacking: 'normal',
#              data: [", genre_data3$Action,"]
#              },
#              'Hispanic2': {
#              name: 'Animated',
#              color: 'rgba(253,192,134,.5)',
#              stacking: 'normal',
#              data: [", genre_data3$Animated,
#              "]
#              },
#              'Hispanic3': {
#              name: 'Comedy',
#              color: 'rgba(127,201,117,.5)',
#              stacking: 'normal',
#              data: [", genre_data3$Comedy,
#              "]
#              },
#              'Hispanic4': {
#              name: 'Drama',
#              color: 'rgba(240,240,120,.7)',
#              stacking: 'normal',
#              data: [", genre_data3$Drama,
#              "]
#              },
#              'Hispanic5': {
#              name: 'Fantasy/Adventure',
#              color: 'rgba(190,174,212,.5)',
#              stacking: 'normal',
#              data: [", genre_data3$'Fantasy/Adventure',
#              "]
#              },
#              'Hispanic6': {
#              name: 'Horror',
#              color: 'rgba(237,7,7,.5)',
#              stacking: 'normal',
#              data: [", genre_data3$Horror,
#              "]
#              },
#              'Asian': {
#              name: 'Action',
#              color: 'rgba(56,108,176,.5)',
#              stacking: 'normal',
#              data: [", genre_data4$Action,"]
#              },
#              'Asian2': {
#              name: 'Animated',
#              color: 'rgba(253,192,134,.5)',
#              stacking: 'normal',
#              data: [", genre_data4$Animated,
#              "]
#              },
#              'Asian3': {
#              name: 'Comedy',
#              color: 'rgba(127,201,117,.5)',
#              stacking: 'normal',
#              data: [", genre_data4$Comedy,
#              "]
#              },
#              'Asian4': {
#              name: 'Drama',
#              color: 'rgba(240,240,120,.7)',
#              stacking: 'normal',
#              data: [", genre_data4$Drama,
#              "]
#              },
#              'Asian5': {
#              name: 'Fantasy/Adventure',
#              color: 'rgba(190,174,212,.5)',
#              stacking: 'normal',
#              data: [", genre_data4$'Fantasy/Adventure',
#              "]
#              },
#              'Asian6': {
#              name: 'Horror',
#              color: 'rgba(237,7,7,.5)',
#              stacking: 'normal',
#              data: [", genre_data4$Horror,
#              "]
#              }
#              },
#              series = [drilldowns[e.point.drilldownName], drilldowns[e.point.drilldownName + '2'], # drilldowns[e.point.drilldownName + '3'], drilldowns[e.point.drilldownName + '4'], drilldowns[e.point.drilldownName + # '5'], drilldowns[e.point.drilldownName + '6']];
#              
#              chart.addSingleSeriesAsDrilldown(e.point, series[0]);
#              chart.addSingleSeriesAsDrilldown(e.point, series[1]);
#              chart.addSingleSeriesAsDrilldown(e.point, series[2]);
#              chart.addSingleSeriesAsDrilldown(e.point, series[3]);
#              chart.addSingleSeriesAsDrilldown(e.point, series[4]);
#              chart.addSingleSeriesAsDrilldown(e.point, series[5]);
#              chart.applyDrilldown();
#              }
#              
#              }")
# 
# white_y <- all_prop_tbl %>% pull(all_white_prop)
# white_main <- tibble(name = " ", x = 1980:2019, y = white_y, drilldownName = 'White', drilldown = T) %>% list_parse()
# 
# black_y <- all_prop_tbl %>% pull(all_black_prop)
# black_main <- tibble(name = " ", x = 1980:2019, y = black_y, drilldownName = 'Black', drilldown = T) %>% list_parse()
# 
# hisp_y <- all_prop_tbl %>% pull(all_hisp_prop)
# hisp_main <- tibble(name = " ", x = 1980:2019, y = hisp_y, drilldownName = 'Hispanic', drilldown = T) %>% list_parse()
# 
# asian_y <- all_prop_tbl %>% pull(all_asian_prop)
# asian_main <- tibble(name = " ", x = 1980:2019, y = asian_y, drilldownName = 'Asian', drilldown = T) %>% list_parse()
```

```{r, echo = FALSE}
# temp_hchart <- highchart() %>% 
#   hc_chart(type = 'area',
#            events = list(
#              drilldown = JS(fn))) %>% 
#   hc_add_series(name = "White",
#                 data = white_main,
#                 color = "#A63A50",
#                 fillColor = "rgba(251,251,251,0)") %>% 
#   hc_add_series(name = "Black",
#                 data = black_main,
#                 color = "#37123C",
#                 fillColor = "rgba(251,251,251,0)") %>%
#   hc_add_series(name = "Hispanic",
#                 data = hisp_main,
#                 color = "#DDA77B",
#                 fillColor = "rgba(251,251,251,0)") %>% 
#   hc_add_series(name = "Asian",
#                 data = asian_main,
#                 color = "#A99F96",
#                 fillColor = "rgba(251,251,251,0)") %>%
#   hc_plotOptions(area = list(marker = list(enabled = FALSE), legendIndex = 1)) %>% 
#   hc_title(text = "Actor Representation by Race/Ethnicity") %>%
#   hc_add_theme(thm) %>% 
#   hc_tooltip(valueDecimals = 3, snap = 45) 
# saveWidget(temp_hchart, "highchart3.html", selfcontained = TRUE)

htmltools::tags$iframe(
  srcdoc = paste(readLines("highchart3.html"), collapse = "\n"),
  width = "100%",
  height = "500px",
  frameborder = "0"
)
```

The racial makeup of actors in top-billed Hollywood roles has not changed much since 1980. Still, we do see a meaningful increase in the representation of Black actors. The proportion of black actors has increased from .033 in 1980 to .146 today.  Conversely, white actors went from filling about 95% of the top movie roles in 1980 to filling 79% of these roles in 2019. We see small changes in the percentages of top-billed Asian and Hispanic actors, both of which went from under 1% in 1980 to 3-3.5% today.

Click on the line representing Black actors to see the breakdown of top-billed Black actors by genre. This area chart shows that top-billed Black actors were cast almost exclusively in comedies and dramas in 1980. The increase in the overall proportion of Black actors among top-billed actors appears to have resulted from greater black representation in the other genres. In particular, more black actors star in animated movies and in fantasy/adventure movies today.  

What about the relative representation of men and women in Hollywood? Overall proportions of men and women have not changed a whole lot (it's about 60-40). We see some interesting trends when we disaggregate the genders by age group. The following figure displays changes in proportions of men and women in Hollywood movies by age groups. Men are in the left plot and women are in the right plot. Each plot divides men and women into five age groups: under 18, 18-34, 35-49, 50-69, over 70. 

```{r, echo = FALSE, warning=FALSE}
gender_reps_tbl <- movie_metadata_tbl %>% mutate(year = str_sub(date, 1, 4)) %>% 
  filter(year < 2020 & year > 1979) %>% group_by(year) %>% 
  summarize(woman_under18_tots = length(which(cast_age_gender %>% unlist == 1)),
            woman_18_34_tots =   length(which(cast_age_gender %>% unlist == 2)),
            woman_35_49_tots =   length(which(cast_age_gender %>% unlist == 3)),
            woman_50_69_tots =   length(which(cast_age_gender %>% unlist == 4)),
            woman_over70_tots =  length(which(cast_age_gender %>% unlist == 5)),
            man_under18_tots =   length(which(cast_age_gender %>% unlist == 6)),
            man_18_34_tots =     length(which(cast_age_gender %>% unlist == 7)),
            man_35_49_tots =     length(which(cast_age_gender %>% unlist == 8)),
            man_50_69_tots =     length(which(cast_age_gender %>% unlist == 9)),
            man_over70_tots =    length(which(cast_age_gender %>% unlist == 10)))

gender_reps_tbl <- gender_reps_tbl %>% group_by(year) %>% 
  mutate(woman_tots = woman_under18_tots + woman_18_34_tots + woman_35_49_tots + 
                      woman_50_69_tots + woman_over70_tots,
        man_tots = man_under18_tots + man_18_34_tots + man_35_49_tots + 
          man_50_69_tots + man_over70_tots) %>% ungroup

woman_prop_vec <- gender_reps_tbl %>% mutate(woman_prop = woman_tots/(woman_tots + man_tots)) %>% pull(woman_prop) 
man_prop_vec <- gender_reps_tbl %>% mutate(man_prop = man_tots/(woman_tots + man_tots)) %>% pull(man_prop) 

gender_reps_prop_tbl<- gender_reps_tbl %>% mutate_at(vars(woman_under18_tots, woman_18_34_tots, woman_35_49_tots,
                                     woman_50_69_tots, woman_over70_tots), ~.x/woman_tots) %>% 
                    mutate_at(vars(man_under18_tots, man_18_34_tots, man_35_49_tots, 
                                   man_50_69_tots, man_over70_tots), ~.x/man_tots)

gender_reps_prop_tbl %>% 
  mutate_at(vars(woman_under18_tots, woman_18_34_tots, woman_35_49_tots, woman_50_69_tots, woman_over70_tots), ~.x*woman_prop_vec) %>% 
  mutate_at(vars(man_under18_tots, man_18_34_tots, man_35_49_tots, man_50_69_tots, man_over70_tots), ~.x*man_prop_vec) %>%  
  select(woman_under18_tots, woman_18_34_tots, woman_35_49_tots, woman_50_69_tots, woman_over70_tots,
                                              man_under18_tots, man_18_34_tots, man_35_49_tots, man_50_69_tots, man_over70_tots) %>% 
  tidyr::gather(., key = "group", value = "prop") %>% mutate(group = str_replace(group, "^.*?_", "")) %>%
  cbind(year = rep(1980:2019, 10), gender = c(rep("Women", 200), rep("Men", 200)), .) %>% as_tibble %>% 
  mutate(group = factor(group, labels = c("18-34", "35-49", "50-69", "Over 70", "Under 18"))) %>%
  mutate(group = factor(group, levels = c("Over 70", "50-69", "35-49", "18-34", "Under 18"))) %>% 
  ggplot(., aes(x = year, y = prop, fill = group)) + geom_area() + facet_wrap(~gender) + 
  scale_fill_manual(values=c("#FDC086",
    "#7FC975",
    "#F0F078",
    "#BEAED4",
    "#ED0707"),
    limits = c("Over 70", "50-69", "35-49", "18-34", "Under 18"),
    name = "Age Group") +
  labs(x = "Year", y = "Proportion", title = "Representation of Men and Women in Film", subtitle = "By Age Group") +
  theme(plot.title=element_text(size= 13, hjust=0.5, color = '#333333', vjust=.5, family = "Optima"),
        axis.text.x=element_text(size= 8, angle=-27, hjust=0, vjust=.5),
        plot.subtitle=element_text(family= "Georgia", size=8, hjust=0.5, color="#666666"),
        strip.text.x = element_text(family = 'Lao Sangam MN'),
        axis.title.x = element_text(family = 'Georgia', color= '#333333', size = 9),
        axis.title.y = element_text(family = 'Georgia', color= '#333333', size = 9),
        plot.background = element_rect(fill = '#fbfbfb'),
        panel.background =  element_rect(fill = '#fbfbfb'),
        panel.grid.major =  element_line(color = '#f8faf0'),
        panel.grid.minor =  element_line(color = '#f8faf0'),
        panel.border = element_rect(colour = "#EFEFEF", fill=NA, size=.8),
        strip.background = element_rect(fill="#EFEFEF"),
        legend.background = element_rect(color = "#EFEFEF", fill = "#fbfbfb"),
        legend.text = element_text(colour="#666666", family = "Georgia"),
        legend.title = element_text(colour="#666666", family = "Georgia")) +
scale_x_discrete(limits = c(1980, 1990, 2000, 2010),
                 expand = expand_scale(mult = c(0,0))) + 
  scale_y_continuous(expand = expand_scale(mult = c(0,.1))) 
```

Look at the age breakdown of women in the left plot. The red, purple, and yellow layers represent women actors 49 and under. Even today, these groups make up about 80% of top-billed women actors. Older women remain highly underrepresented in Hollywood film. There's also a large discrepancy in representation between older women and older men, who appear to be about 4 times more prevalent than older women. This can be seen by comparing the green layers of the two plots.

# Recap

That concludes our journey through forty years of Hollywood film.  I hope you learned a thing or two. Please reach out to me if you have any questions about how I created these plots or the underlying data.  


